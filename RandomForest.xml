<tool id="random-forest" name="Random Forest">
    <description> for feature selection.</description>
    <requirements>
        <requirement type="python-module">pandas</requirement>
        <requirement type="python-module">sklearn</requirement>
    </requirements>
    <command interpreter="python">RandomForest.py
        --input $input
        --design $design
        --ID $uniqID
        --group $group
        --num $number_of_estimators
        --out $outfile1
        --out2 $outfile2
    </command>
    <inputs>
        <param name="input" type="data" format="tabular" label="Wide Dataset" help="Input dataset in wide format and tab separated. If not tab separated see TIP below."/>
        <param name="design" type="data" format="tabular" label="Metadata File" help="Metadata file tab separated. Note you need a 'sampleID' column. If not tab separated see TIP below"/>
        <param name="uniqID" type="text" size="30" value="" label="Unique Compound ID" help="Name of the column in your Wide Dataset that has unique compound/gene IDs."/>
        <param name="group" type="text" size="30" value="" label="Group/Treatment" help="Name of the column in your Metadata File that contains group classifications."/>
        <param name="number_of_estimators" type="text" size="30" value="1000" label="Number of trees in the forest" help="Run at least 1000 trees."/>
    </inputs>
    <outputs>
        <data format="csv" name="outfile1" label="Transformed Data"/>
        <data format="csv" name="outfile2" label="Importance Factors"/>
    </outputs>
    <help>

    .. class:: infomark

    **TIP:** If your data is not TAB delimited, use *Text Manipulation-&gt;Convert*


    **Syntax**

    This tool uses the Random forest algorithm to select the important features that the groups/classes differentiate the most based on.

    - Two sets of results are displayed in the resulting history item.

    **Input**

    - Two input datasets are required.

        **Wide Formatted Dataset:**

        A wide formatted dataset that contains measurements for each sample.::

            +----------+---------+---------+---------+-----+
            | Compound | sample1 | sample2 | sample3 | ... |
            +==========+=========+=========+=========+=====+
            | one      | 10      | 20      | 10      | ... |
            | two      | 5       | 22      | 30      | ... |
            | three    | 30      | 27      | 2       | ... |
            | four     | 32      | 17      | 8       | ... |
            | ...      | ...     | ...     | ...     | ... |
            +----------+---------+---------+---------+-----+

            **NOTE:** The sample IDs must match the sample IDs in the Design File (below).
            Extra columns will automatically be ignored.


            **Design File:**
            A design file relating samples to various groups/treatment.::

            +----------+--------+
            | sampleID | group1 |
            +==========+========+
            | sample1  | g1     |
            | sample2  | g1     |
            | sample3  | g1     |
            | sample4  | g2     |
            | sample5  | g2     |
            | sample6  | g2     |
            | ...      | ...    |
            +----------+--------+

            **NOTE: You must have a column named *sampleID***
            and the values in this column must match the columns names in the wide
            formatted dataset. Extra columns will be ignored.

    - In addition to your datasets, you need to provide:

        **Unique Compound ID**

        - The column name in your wide dataset that contains the unique IDs for
          your compounds. In our example dataset you would input *Compound*.

        **Group/Treatment**

        - The column name in your design file that contains group information. In
          our example design file we would put *group1*.

       **Number of Trees in the Forest**

       - Typical number of trees is at least 1,000. This script defaults to 1,000.
         One would increase the number of trees in the forest if upon multiple
         rerunning of the algorithm, the order of importance of features changes significantly.

    **Example output**

    - output 1: Transformed dataset::

        +----------+----------+----------+----------+----------+
        | sampleID | group    | feature1 | feature3 | feature2 |
        +==========+==========+==========+==========+==========+
        | sample1  | human    | 68       | 0.1      | 4.1      |
        | sample2  | human    | 71       | 0.31     | 4.6      |
        | sample3  | nonhuman | 62       | 0.09     | 3.8      |
        | sample4  | human    | 75       | 0.65     | 4.4      |
        | sample5  | nonhuman | 58       | 0.23     | 3.2      |
        | sample6  | nonhuman | 60       | 0.77     | 3.1      |
        | ...      | ...      | ...      | ...      | ...      |
        +----------+----------+----------+----------+----------+

    - output 2: rank-order list of features and their relative importance ::

        +----------+------+
        | feature1 | 0.45 |
        +==========+======+
        | feature3 | 0.34 |
        +----------+------+
        | feature2 | 0.22 |
        +----------+------+

    **Next Step**

    Use the scatterplotPNG tool on output1 (transformed dataset) to plot the two most important features againt each other and test the separation levels.

    </help>
</tool>
