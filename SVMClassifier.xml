<tool id="SVMClassifier2" name="SVM Classifier (Beta)" version="2.0.0">
  <description> for classification.</description>
  <requirements>
    <requirement type="python-module">pandas</requirement>
    <requirement type="python-module">sklearn</requirement>
  </requirements>
  <command interpreter="python">SVMClassifier.py
      --train_wide $train_wide
      --train_design $train_design
      --test_wide $test_wide
      --test_design $test_design
      --group $group
      --ID $uniqID
      --kernel $kernel
      --degree $degree
      --C $C
      --a $a
      --b $b
      --outfile1 $outfile1
      --accuracy_on_training $accuracy_on_training
  </command>
  <inputs>
    <param name="train_wide" type="data" format="tabular" label="Training Wide Dataset" help="Dataset missing? See TIP below"/>
    <param name="train_design" type="data" format="tabular" label="Training Design Dataset" help="Dataset missing? See TIP below"/>
    <param name="test_wide" type="data" format="tabular" label="Target Wide Dataset" help="Dataset missing? See TIP below"/>
    <param name="test_design" type="data" format="tabular" label="Target Design Dataset" help="Dataset missing? See TIP below"/>
    <param name="group" size="30" type="text" value="class" label="Group/Treatment" help="Insert the group name from the Design file to separate the flag file. Must be the same across both data sets"/>
    <param name="uniqID" type="text" size="30" value="Name" label="Unique Feature ID" help="Name of the column in your Wide Dataset that has unique Feature IDs. Must be the same across both data sets."/>
    <param name="kernel" type="select" size="30" display="radio" value="rbf" label="SVM kernel function">
        <option value="rbf">Radial Basis function (Gaussians)</option>
        <option value="linear">Linear</option>
        <option value="poly">Polynomial</option>
        <option value="sigmoid">Sigmoid</option>
    </param>
    <param name="degree" size="30" type="text" value="3" label="Polynomial degree" help='only used for the polynomial kernel'/>
    <param name="C" size="30" type="text" value="1" label="Regularization parameter C" help='penalizes potential overfitting, and must have a positive value C > 0.'/>
    <param name="a" size="30" type="text" value="0.0" label="coefficient a" help='a>0 --see kernel definitions below in help'/>
    <param name="b" size="30" type="text" value="0.0" label="coefficient b" help='see kernel definitions below in help'/>
  </inputs>
  <outputs>
    <data format="csv" name="outfile1" label="Classified target"/>
    <data name="accuracy_on_training" format='tabular' label="accuracy on the trainig set"/>
  </outputs>
<help>

..class:: infomark

**TIP:**
If your data is not TAB delimited, use *Text Manipulation-&gt;Convert*

.. class:: warningmark

**WARNINGS:**
    - (1) This script automatically removes spaces and special characters from strings.
    - (2) If a feature name starts with a number it will prepend an '_'.

------------------------------------------------------------------------------

**What it does**

This is a support vector machine (SVM) classification tool. Given a training dataset containing samples with known group information, the SVM algorithm creates a model that assigns new samples in the target dataset to a group.  The tool returns a new target set containing a new column containing the group assignments and a dataset containing the accuracy of the SVM algorithm on the training set. 

------------------------------------------------------------------------------

**Input**

- Four input datasets are required.

    **Training Dataset**
    - A wide formatted dataset that contains your training data.::

        +----------+---------+---------+---------+-----+
        | Feature  | sample1 | sample2 | sample3 | ... |
        +==========+=========+=========+=========+=====+
        | one      | 10      | 20      | 10      | ... |
        | two      | 5       | 22      | 30      | ... |
        | three    | 30      | 27      | 2       | ... |
        | four     | 32      | 17      | 8       | ... |
        | ...      | ...     | ...     | ...     | ... |
        +----------+---------+---------+---------+-----+

    **Design File for Training Dataset**

    A metatdata file for the Training dataset relating samples to various
    groups/treatment.::

         +----------+--------+
         | sampleID | group  |
         +==========+========+
         | sample1  | g1     |
         | sample2  | g1     |
         | sample3  | g2     |
         | sample4  | g2     |
         | ...      | ...    |
         +----------+--------+

    **Target Dataset**
    - A wide formatted dataset that contains your target data, the data to which you want to asign goups.::

        +----------+---------+---------+---------+-----+
        | Feature  | sample1 | sample2 | sample3 | ... |
        +==========+=========+=========+=========+=====+
        | A        | 10      | 20      | 10      | ... |
        | B        | 5       | 22      | 30      | ... |
        | C        | 30      | 27      | 2       | ... |
        | D        | 32      | 17      | 8       | ... |
        | ...      | ...     | ...     | ...     | ... |
        +----------+---------+---------+---------+-----+

**Design File for Target Dataset:**

A metatdata file for the Target dataset. At a minimum, a list of all sampleIDs in the Target dataset.::

    +----------+
    | sampleID |
    +==========+
    | sample1  |
    | sample2  |
    | sample3  |
    | ...      |
    +----------+


    **NOTE:** The sampleIDs in the Wide format datasets must match the sampleIDs in their respective Design datasets. Extra columns will automatically be ignored.


**Group**

    - The column name in your Design Training dataset that contains the group/treatment information.
      In our example Design file we would put *group*.


**Unique Feature ID**

- The column name in your Wide Training and Target datasets that contains the unique IDs for
  your features/compounds. In our example dataset you would input *Feature*.  Note the column name
  must be the same in both Training and Target Datasets.


**SVM kernel function**

    - Select one of the four kernel functions for SVM:

    .. image:: ${static_path}/images/secim/kernels.png
       :height: 160
       :width: 300



**Polynomial degree**
    - Must be a positive integer

**Regularization parameter C**
    - Must be greater than zero.  Larger values for C adds to the bias and
      helps removing potential overfitting efftecs.

**Coefficent A**
    - Used in the kernel functions above.  Must be greater than zero. However,
      the value zero is the default and translates to a = 1/n_features, where
      n_features is the number of features same as the length of the descrition
      vector same as the number of dimensions.

**Coefficent B**
    - Independent term in kernel function. It is only significant in
      polynomial and sigmoid kernels.

------------------------------------------------------------------------------

**Output Files**

**Classified_Target**:: is a TSV file of the Target Dataset with an additional column called
'predicted_class' that contains the predicted group information for the indicated feature estimated by the SVM algorithm.

        +-----------------+----------+----------+----------+-----+
        | predicted_class | feature1 | feature2 | feature3 | ... |
        +=================+==========+==========+==========+=====+
        | g1              | 10       | 20       | 10       | ... |
        +-----------------+----------+----------+----------+-----+
        | g2              | 5        | 22       | 30       | ... |
        +-----------------+----------+----------+----------+-----+
        | g1              | 30       | 27       | 2        | ... |
        +-----------------+----------+----------+----------+-----+
        | g2              | 32       | 17       | 8        | ... |
        +-----------------+----------+----------+----------+-----+
        | ...             | ...      | ...      | ...      | ... |
        +-----------------+----------+----------+----------+-----+


**Accuracy on the training set**:: is the accuracy (percentage) on the training dataset and dependent on the kenel
type and associated parameters.  We recommend a good understanding of kernel types and their parameters before using 
this tool and interpreting output.

</help>
</tool>
